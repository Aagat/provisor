#!/usr/bin/python

import os
import sys
import textwrap
from provisor import Provisor
from provisor.utils import getch, validate_pubkey

SUDO_USER = os.environ.get('SUDO_USER')

if not SUDO_USER:
    exit("This script is designed to be run with sudo")

p = Provisor()

ldap_user = p.get_user(SUDO_USER)

user = {
    'name': ldap_user.setdefault('commonName',['Unknown'])[0],
    'login': ldap_user['uid'][0],
    'uid': ldap_user['uidNumber'][0],
    'shell': ldap_user['loginShell'][0],
    'host': ldap_user['host'][0],
    'email': ldap_user['mailRoutingAddress'][0],
    'pubkeys': ldap_user['sshPublicKey'],
}

def ldap_sync():
    p.modify_user(
        SUDO_USER,
        pubkeys = user['pubkeys'],
        shell = user['shell'],
    ) 

def main_menu():
    print("\nLDAP User Details:\n")
    print("  Login : %s" % user['login'])
    print("  UID   : %s" % user['uid'])
    print("  Host  : %s" % user['host'])
    print("  Name  : %s" % user['name'])
    print("  Email : %s" % user['email'])
    print("  Shell : %s" % user['shell'])
    print("  SSH Public Keys:")
    for key in user['pubkeys']:
        print(textwrap.fill(
            "%s. %s" % (user['pubkeys'].index(key),key),
            width=74,
            initial_indent='    ',
            subsequent_indent='       '
        ))
    print("\nActions:\n")
    print("  1 - Change Name")
    print("  2 - Change Shell")
    print("  3 - Add SSH Public Key")
    print("  4 - Delete SSH Public Key")
    print("  5 - Exit\n")
    sys.stdout.write('> ')

main_menu()

while True:
 
    key = getch()

    if ord(key) >= 49 and ord(key) <=54: # 0-6
        print("%s\n" % key)

    if ord(key) == 3: # <Ctrl+C>
        break;

    elif key == '\r': # <Enter>
        main_menu()

    elif key == '1':
        user['name'] = raw_input("Enter new name: ")
        main_menu()

    elif key == '2':
        shell = raw_input("Enter new shell, eg /bin/bash:")

        if shell not in ['/bin/bash','/bin/zsh','/bin/ksh','/bin/fish']:
            print('Error: \n"%s" is not an available shell' % shell)
        else:
            user['shell'] = shell
            ldap_sync()
            print('\nShell Updated.')

        print('\nPlease press [Enter] to continue')

    elif key == '3':
        pubkey = raw_input("Paste SSH Public Key to be added:\n")
        valid_pubkey = False;
        try:
            validate_pubkey(pubkey)
            valid_pubkey = True
        except Exception, e:
            print("\nError: %s" % e)

        if pubkey in user['pubkeys']:
            print('\nPublic Key already exists.')

        elif valid_pubkey:
            user['pubkeys'].append(pubkey)
            ldap_sync()
            print('\nPublic Keys updated.')

        print('\nPlease press [Enter] to continue')
                
    elif key == '4':
        if (len(user['pubkeys']) == 0):
            print('\nThere are no SSH Public Keys to delete')
        else:
            print('Press the number of the key you wish to delete')
            print('(Or Press ESC to Cancel)')
            sys.stdout.write('\n> ')
            delkey = getch()
            if ord(delkey) == 27: #Esc
                main_menu()
            elif ord(delkey) >= ord('0') and ord(delkey) <= ord(str(len(user['pubkeys']))):
                print(delkey)
                del user['pubkeys'][int(delkey)]
                ldap_sync()
                print('\nKey Deleted: %s' % delkey)
            else:
                print('\nInvalid key number specified')

            print('\nPlease press [Enter] to continue')

    elif key == '5':
        break;
